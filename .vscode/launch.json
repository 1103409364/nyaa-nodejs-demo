{
  // Use IntelliSense to learn about possible attributes.
  // Hover to view descriptions of existing attributes.
  // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
  "version": "0.2.0",
  "configurations": [
    {
      "name": "(lldb) 启动",
      "type": "cppdbg",
      "request": "launch",
      "program": "${workspaceFolder}/out/Debug", //${fileBasenameNoExtension} 需要运行/调试的是当前打开文件的目录中，名字和当前文件相同，但扩展名为exe的程序。和tasks.json中-o后面的目录一样的
      "args": [],
      "stopAtEntry": false, //设为true时程序将暂停在程序入口处（即停止main函数开始），一般设置为false
      "cwd": "${workspaceFolder}/out", //调试程序时的工作目录 。out对应工程目录下的out文件夹
      "environment": [], //针对调试的程序，要添加到环境中的环境变量
      "externalConsole": false, //调试时是否显示外置控制台窗口（大黑框），一般设置为true显示控制台
      "MIMode": "lldb", // VSCode要使用的调试工具or指示VS代码将连接到的调试器
      "preLaunchTask": "C/C++: clang++ 生成活动文件" // 调试开始前执行的任务，一般为编译程序，这个名字一定要跟tasks.json中的label一致
      // "targetArchitecture": "arm64" // 被调试者的架构。未设置将自动检测（自动检测有问题）。允许的值为 x86、arm、arm64、mips、x64、amd64、x86_64。https://github.com/microsoft/vscode-cpptools/issues/2376
      // "internalConsoleOptions": "neverOpen" //可以没有
      // "miDebuggerPath": "C:\\Program Files\\mingw64\\bin\\gdb.exe", // miDebugger的路径，注意这里要与MinGw的路径对应 当未指定时，它将搜索操作系统的PATH变量来寻找调试器
      // "setupCommands": [
      //   {
      //     "description": "为 gdb 启用整齐打印",
      //     "text": "-enable-pretty-printing",
      //     "ignoreFailures": true
      //   }
      // ],
    }
  ]
}
